// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: test_type.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum TestType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case testFvc // = 0
  case testPeakFlowFev1 // = 1

  /// SMART ONE OX: vers 2.7 - 1.4 - 1.0 OXIMETRY TEST
  case testOximetry // = 2
  case testFtmonitor // = 3

  /// 2.9 - 1.5 - 1.3 OXIMETRY TEST
  case testFvcplus // = 4

  ///VC TEST
  case testVc // = 5

  ///Cardionica
  case testEcg // = 6
  case UNRECOGNIZED(Int)

  init() {
    self = .testFvc
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testFvc
    case 1: self = .testPeakFlowFev1
    case 2: self = .testOximetry
    case 3: self = .testFtmonitor
    case 4: self = .testFvcplus
    case 5: self = .testVc
    case 6: self = .testEcg
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .testFvc: return 0
    case .testPeakFlowFev1: return 1
    case .testOximetry: return 2
    case .testFtmonitor: return 3
    case .testFvcplus: return 4
    case .testVc: return 5
    case .testEcg: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension TestType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [TestType] = [
    .testFvc,
    .testPeakFlowFev1,
    .testOximetry,
    .testFtmonitor,
    .testFvcplus,
    .testVc,
    .testEcg,
  ]
}

#endif  // swift(>=4.2)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension TestType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TestFVC"),
    1: .same(proto: "TestPeakFlowFev1"),
    2: .same(proto: "TestOximetry"),
    3: .same(proto: "TestFTmonitor"),
    4: .same(proto: "TestFVCPlus"),
    5: .same(proto: "TestVC"),
    6: .same(proto: "TestECG"),
  ]
}
