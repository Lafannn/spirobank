// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target armv7s-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SpirobankSmartKit
import Compression
import CoreBluetooth
import CoreFoundation
import Dispatch
import Foundation
@_exported import SpirobankSmartKit
import Swift
import _Concurrency
public struct Entry : Swift.Equatable {
  public enum EntryType : Swift.Int {
    case file
    case directory
    case symlink
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public func path(using encoding: Swift.String.Encoding) -> Swift.String
  public var path: Swift.String {
    get
  }
  public var fileAttributes: [Foundation.FileAttributeKey : Any] {
    get
  }
  public var checksum: SpirobankSmartKit.CRC32 {
    get
  }
  public var type: SpirobankSmartKit.Entry.EntryType {
    get
  }
  public var compressedSize: Swift.Int {
    get
  }
  public var uncompressedSize: Swift.Int {
    get
  }
  public static func == (lhs: SpirobankSmartKit.Entry, rhs: SpirobankSmartKit.Entry) -> Swift.Bool
}
@objc public class DFUServiceInitiator : ObjectiveC.NSObject {
  @objc weak public var delegate: SpirobankSmartKit.DFUServiceDelegate?
  @objc weak public var progressDelegate: SpirobankSmartKit.DFUProgressDelegate?
  @objc weak public var logger: SpirobankSmartKit.LoggerDelegate?
  @objc public var peripheralSelector: SpirobankSmartKit.DFUPeripheralSelectorDelegate
  @objc public var packetReceiptNotificationParameter: Swift.UInt16
  @objc public var forceDfu: Swift.Bool
  @objc public var forceScanningForNewAddressInLegacyDfu: Swift.Bool
  @objc public var connectionTimeout: Swift.Double
  @objc public var dataObjectPreparationDelay: Swift.Double
  @objc public var alternativeAdvertisingNameEnabled: Swift.Bool
  @objc public var alternativeAdvertisingName: Swift.String?
  @objc public var enableUnsafeExperimentalButtonlessServiceInSecureDfu: Swift.Bool
  @objc public var uuidHelper: SpirobankSmartKit.DFUUuidHelper
  @objc public var disableResume: Swift.Bool
  @available(*, deprecated, message: "Use init(queue: DispatchQueue?) instead.")
  @objc public init(centralManager: CoreBluetooth.CBCentralManager, target: CoreBluetooth.CBPeripheral)
  @objc public init(queue: Dispatch.DispatchQueue? = nil, delegateQueue: Dispatch.DispatchQueue = DispatchQueue.main, progressQueue: Dispatch.DispatchQueue = DispatchQueue.main, loggerQueue: Dispatch.DispatchQueue = DispatchQueue.main)
  @objc public func with(firmware file: SpirobankSmartKit.DFUFirmware) -> SpirobankSmartKit.DFUServiceInitiator
  @available(*, deprecated, message: "Use start(target: CBPeripheral) instead.")
  @objc public func start() -> SpirobankSmartKit.DFUServiceController?
  @objc public func start(target: CoreBluetooth.CBPeripheral) -> SpirobankSmartKit.DFUServiceController?
  @objc public func start(targetWithIdentifier uuid: Foundation.UUID) -> SpirobankSmartKit.DFUServiceController?
  @objc deinit
}
public enum CompressionMethod : Swift.UInt16 {
  case none
  case deflate
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
public typealias CRC32 = Swift.UInt32
public typealias Consumer = (_ data: Foundation.Data) throws -> Swift.Void
public typealias Provider = (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data
extension Foundation.Data {
  public func crc32(checksum: SpirobankSmartKit.CRC32) -> SpirobankSmartKit.CRC32
  public static func compress(size: Swift.Int, bufferSize: Swift.Int, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> SpirobankSmartKit.CRC32
  public static func decompress(size: Swift.Int, bufferSize: Swift.Int, skipCRC32: Swift.Bool, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> SpirobankSmartKit.CRC32
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class DFUServiceController : ObjectiveC.NSObject {
  @objc public func pause()
  @objc public func resume()
  @objc public func abort() -> Swift.Bool
  @objc public func restart()
  @objc public var paused: Swift.Bool {
    @objc get
  }
  @objc public var aborted: Swift.Bool {
    @objc get
  }
  @objc deinit
}
extension SpirobankSmartKit.Archive {
  final public func totalUnitCountForRemoving(_ entry: SpirobankSmartKit.Entry) -> Swift.Int64
  final public func totalUnitCountForReading(_ entry: SpirobankSmartKit.Entry) -> Swift.Int64
  final public func totalUnitCountForAddingItem(at url: Foundation.URL) -> Swift.Int64
}
@objc public enum LogLevel : Swift.Int {
  case debug = 0
  case verbose = 1
  case info = 5
  case application = 10
  case warning = 15
  case error = 20
  public func name() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol LoggerDelegate {
  @objc func logWith(_ level: SpirobankSmartKit.LogLevel, message: Swift.String)
}
extension SpirobankSmartKit.Archive {
  final public func addEntry(with path: Swift.String, relativeTo baseURL: Foundation.URL, compressionMethod: SpirobankSmartKit.CompressionMethod = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, fileURL: Foundation.URL, compressionMethod: SpirobankSmartKit.CompressionMethod = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSize, progress: Foundation.Progress? = nil) throws
  final public func addEntry(with path: Swift.String, type: SpirobankSmartKit.Entry.EntryType, uncompressedSize: Swift.UInt32, modificationDate: Foundation.Date = Date(), permissions: Swift.UInt16? = nil, compressionMethod: SpirobankSmartKit.CompressionMethod = .none, bufferSize: Swift.UInt32 = defaultWriteChunkSize, progress: Foundation.Progress? = nil, provider: (_ position: Swift.Int, _ size: Swift.Int) throws -> Foundation.Data) throws
  final public func remove(_ entry: SpirobankSmartKit.Entry, bufferSize: Swift.UInt32 = defaultReadChunkSize, progress: Foundation.Progress? = nil) throws
}
public var defaultReadChunkSize: Swift.UInt32
public var defaultWriteChunkSize: Swift.UInt32
public var defaultFilePermissions: Swift.UInt16
public var defaultDirectoryPermissions: Swift.UInt16
final public class Archive : Swift.Sequence {
  public enum ArchiveError : Swift.Error {
    case unreadableArchive
    case unwritableArchive
    case invalidEntryPath
    case invalidCompressionMethod
    case invalidStartOfCentralDirectoryOffset
    case missingEndOfCentralDirectoryRecord
    case invalidNumberOfEntriesOnDisk
    case invalidNumberOfEntriesInCentralDirectory
    case cancelledOperation
    case invalidBufferSize
    public static func == (a: SpirobankSmartKit.Archive.ArchiveError, b: SpirobankSmartKit.Archive.ArchiveError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum AccessMode : Swift.UInt {
    case create
    case read
    case update
    public init?(rawValue: Swift.UInt)
    public typealias RawValue = Swift.UInt
    public var rawValue: Swift.UInt {
      get
    }
  }
  final public let url: Foundation.URL
  final public let accessMode: SpirobankSmartKit.Archive.AccessMode
  public init?(url: Foundation.URL, accessMode mode: SpirobankSmartKit.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  public init?(data: Foundation.Data = Data(), accessMode mode: SpirobankSmartKit.Archive.AccessMode, preferredEncoding: Swift.String.Encoding? = nil)
  @objc deinit
  final public func makeIterator() -> Swift.AnyIterator<SpirobankSmartKit.Entry>
  final public subscript(path: Swift.String) -> SpirobankSmartKit.Entry? {
    get
  }
  public typealias Element = SpirobankSmartKit.Entry
  public typealias Iterator = Swift.AnyIterator<SpirobankSmartKit.Entry>
}
public protocol DataConvertible {
  static func + (lhs: Foundation.Data, rhs: Self) -> Foundation.Data
  static func += (lhs: inout Foundation.Data, rhs: Self)
}
extension SpirobankSmartKit.DataConvertible {
  public static func + (lhs: Foundation.Data, rhs: Self) -> Foundation.Data
  public static func += (lhs: inout Foundation.Data, rhs: Self)
}
extension Swift.UInt8 : SpirobankSmartKit.DataConvertible {
}
extension Swift.UInt16 : SpirobankSmartKit.DataConvertible {
}
extension Swift.UInt32 : SpirobankSmartKit.DataConvertible {
}
extension Swift.Int : SpirobankSmartKit.DataConvertible {
}
extension Swift.Float : SpirobankSmartKit.DataConvertible {
}
extension Swift.Double : SpirobankSmartKit.DataConvertible {
}
extension Swift.String : SpirobankSmartKit.DataConvertible {
  public static func + (lhs: Foundation.Data, rhs: Swift.String) -> Foundation.Data
}
extension Foundation.Data : SpirobankSmartKit.DataConvertible {
  public static func + (lhs: Foundation.Data, rhs: Foundation.Data) -> Foundation.Data
}
@objc public enum DFUFirmwareType : Swift.UInt8 {
  case softdevice = 1
  case bootloader = 2
  case application = 4
  case softdeviceBootloader = 3
  case softdeviceBootloaderApplication = 7
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public class DFUFirmware : ObjectiveC.NSObject {
  @objc final public let fileName: Swift.String?
  @objc final public let fileUrl: Foundation.URL?
  @objc public var valid: Swift.Bool {
    @objc get
  }
  @objc public var size: SpirobankSmartKit.DFUFirmwareSize {
    @objc get
  }
  @objc public var parts: Swift.Int {
    @objc get
  }
  @objc public convenience init?(urlToZipFile: Foundation.URL)
  @objc public init?(urlToZipFile: Foundation.URL, type: SpirobankSmartKit.DFUFirmwareType)
  @objc public convenience init?(zipFile: Foundation.Data)
  @objc public init?(zipFile: Foundation.Data, type: SpirobankSmartKit.DFUFirmwareType)
  @objc public init?(urlToBinOrHexFile: Foundation.URL, urlToDatFile: Foundation.URL?, type: SpirobankSmartKit.DFUFirmwareType)
  @objc public init?(binFile: Foundation.Data, datFile: Foundation.Data?, type: SpirobankSmartKit.DFUFirmwareType)
  @objc public init?(hexFile: Foundation.Data, datFile: Foundation.Data?, type: SpirobankSmartKit.DFUFirmwareType)
  @objc deinit
}
extension Foundation.FileManager {
  public func zipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, shouldKeepParent: Swift.Bool = true, compressionMethod: SpirobankSmartKit.CompressionMethod = .none, progress: Foundation.Progress? = nil) throws
  public func unzipItem(at sourceURL: Foundation.URL, to destinationURL: Foundation.URL, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, preferredEncoding: Swift.String.Encoding? = nil) throws
}
extension Foundation.URL {
  public func isContained(in parentDirectoryURL: Foundation.URL) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class SecureDFUServiceInitiator : SpirobankSmartKit.DFUServiceInitiator {
  @objc override public func start(targetWithIdentifier uuid: Foundation.UUID) -> SpirobankSmartKit.DFUServiceController?
  @available(*, deprecated)
  @objc override public init(centralManager: CoreBluetooth.CBCentralManager, target: CoreBluetooth.CBPeripheral)
  @objc override public init(queue: Dispatch.DispatchQueue? = nil, delegateQueue: Dispatch.DispatchQueue = super, progressQueue: Dispatch.DispatchQueue = super, loggerQueue: Dispatch.DispatchQueue = super)
  @objc deinit
}
extension SpirobankSmartKit.Archive {
  final public func extract(_ entry: SpirobankSmartKit.Entry, to url: Foundation.URL, bufferSize: Swift.UInt32 = defaultReadChunkSize, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil) throws -> SpirobankSmartKit.CRC32
  final public func extract(_ entry: SpirobankSmartKit.Entry, bufferSize: Swift.UInt32 = defaultReadChunkSize, skipCRC32: Swift.Bool = false, progress: Foundation.Progress? = nil, consumer: (_ data: Foundation.Data) throws -> Swift.Void) throws -> SpirobankSmartKit.CRC32
}
@objc @_inheritsConvenienceInitializers public class IntelHex2BinConverter : ObjectiveC.NSObject {
  public static func convert(_ hex: Foundation.Data, mbrSize: Swift.UInt32 = 0) -> Foundation.Data?
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc open class DFUPeripheralSelector : ObjectiveC.NSObject, SpirobankSmartKit.DFUPeripheralSelectorDelegate {
  @objc open func select(_ peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Swift.AnyObject], RSSI: Foundation.NSNumber, hint name: Swift.String? = nil) -> Swift.Bool
  @objc open func filterBy(hint dfuServiceUUID: CoreBluetooth.CBUUID) -> [CoreBluetooth.CBUUID]?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum DFUUuidType : Swift.Int {
  case legacyService = 0
  case legacyControlPoint = 1
  case legacyPacket = 2
  case legacyVersion = 3
  case secureService = 4
  case secureControl = 5
  case securePacket = 6
  case buttonlessService = 7
  case buttonlessCharacteristic = 8
  case buttonlessWithoutBondSharing = 9
  case buttonlessWithBondSharing = 10
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class DFUUuid : ObjectiveC.NSObject {
  @objc final public let uuid: CoreBluetooth.CBUUID
  @objc final public let type: SpirobankSmartKit.DFUUuidType
  @objc public init(withUUID: CoreBluetooth.CBUUID, forType: SpirobankSmartKit.DFUUuidType)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class DFUUuidHelper : ObjectiveC.NSObject {
  @objc public var legacyDFUService: CoreBluetooth.CBUUID {
    get
  }
  @objc public var legacyDFUControlPoint: CoreBluetooth.CBUUID {
    get
  }
  @objc public var legacyDFUPacket: CoreBluetooth.CBUUID {
    get
  }
  @objc public var legacyDFUVersion: CoreBluetooth.CBUUID {
    get
  }
  @objc public var secureDFUService: CoreBluetooth.CBUUID {
    get
  }
  @objc public var secureDFUControlPoint: CoreBluetooth.CBUUID {
    get
  }
  @objc public var secureDFUPacket: CoreBluetooth.CBUUID {
    get
  }
  @objc public var buttonlessExperimentalService: CoreBluetooth.CBUUID {
    get
  }
  @objc public var buttonlessExperimentalCharacteristic: CoreBluetooth.CBUUID {
    get
  }
  @objc public var buttonlessWithoutBonds: CoreBluetooth.CBUUID {
    get
  }
  @objc public var buttonlessWithBonds: CoreBluetooth.CBUUID {
    get
  }
  @objc override dynamic public init()
  @objc public convenience init(customUuids uuids: [SpirobankSmartKit.DFUUuid])
  @objc deinit
}
@objc public enum DFUError : Swift.Int {
  case remoteLegacyDFUSuccess = 1
  case remoteLegacyDFUInvalidState = 2
  case remoteLegacyDFUNotSupported = 3
  case remoteLegacyDFUDataExceedsLimit = 4
  case remoteLegacyDFUCrcError = 5
  case remoteLegacyDFUOperationFailed = 6
  case remoteSecureDFUSuccess = 11
  case remoteSecureDFUOpCodeNotSupported = 12
  case remoteSecureDFUInvalidParameter = 13
  case remoteSecureDFUInsufficientResources = 14
  case remoteSecureDFUInvalidObject = 15
  case remoteSecureDFUSignatureMismatch = 16
  case remoteSecureDFUUnsupportedType = 17
  case remoteSecureDFUOperationNotPermitted = 18
  case remoteSecureDFUOperationFailed = 20
  case remoteSecureDFUExtendedError = 21
  case remoteExtendedErrorWrongCommandFormat = 22
  case remoteExtendedErrorUnknownCommand = 23
  case remoteExtendedErrorInitCommandInvalid = 24
  case remoteExtendedErrorFwVersionFailure = 25
  case remoteExtendedErrorHwVersionFailure = 26
  case remoteExtendedErrorSdVersionFailure = 27
  case remoteExtendedErrorSignatureMissing = 28
  case remoteExtendedErrorWrongHashType = 29
  case remoteExtendedErrorHashFailed = 30
  case remoteExtendedErrorWrongSignatureType = 31
  case remoteExtendedErrorVerificationFailed = 32
  case remoteExtendedErrorInsufficientSpace = 33
  case remoteExperimentalButtonlessDFUSuccess = 9001
  case remoteExperimentalButtonlessDFUOpCodeNotSupported = 9002
  case remoteExperimentalButtonlessDFUOperationFailed = 9004
  case remoteButtonlessDFUSuccess = 91
  case remoteButtonlessDFUOpCodeNotSupported = 92
  case remoteButtonlessDFUOperationFailed = 94
  case remoteButtonlessDFUInvalidAdvertisementName = 95
  case remoteButtonlessDFUBusy = 96
  case remoteButtonlessDFUNotBonded = 97
  case fileNotSpecified = 101
  case fileInvalid = 102
  case extendedInitPacketRequired = 103
  case initPacketRequired = 104
  case failedToConnect = 201
  case deviceDisconnected = 202
  case bluetoothDisabled = 203
  case serviceDiscoveryFailed = 301
  case deviceNotSupported = 302
  case readingVersionFailed = 303
  case enablingControlPointFailed = 304
  case writingCharacteristicFailed = 305
  case receivingNotificationFailed = 306
  case unsupportedResponse = 307
  case bytesLost = 308
  case crcError = 309
  case invalidInternalState = 500
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum DFUState : Swift.Int {
  case connecting
  case starting
  case enablingDfuMode
  case uploading
  case validating
  case disconnecting
  case completed
  case aborted
  public func description() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol DFUProgressDelegate {
  @objc func dfuProgressDidChange(for part: Swift.Int, outOf totalParts: Swift.Int, to progress: Swift.Int, currentSpeedBytesPerSecond: Swift.Double, avgSpeedBytesPerSecond: Swift.Double)
}
@objc public protocol DFUServiceDelegate {
  @objc func dfuStateDidChange(to state: SpirobankSmartKit.DFUState)
  @objc func dfuError(_ error: SpirobankSmartKit.DFUError, didOccurWithMessage message: Swift.String)
}
@_hasMissingDesignatedInitializers @objc open class DFUFirmwareSize : ObjectiveC.NSObject {
  @objc open var softdevice: Swift.UInt32 {
    get
  }
  @objc open var bootloader: Swift.UInt32 {
    get
  }
  @objc open var application: Swift.UInt32 {
    get
  }
  @objc deinit
}
extension SpirobankSmartKit.Archive {
  final public var data: Foundation.Data? {
    get
  }
}
@objc public protocol DFUPeripheralSelectorDelegate {
  @objc func select(_ peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Swift.AnyObject], RSSI: Foundation.NSNumber, hint name: Swift.String?) -> Swift.Bool
  @objc func filterBy(hint dfuServiceUUID: CoreBluetooth.CBUUID) -> [CoreBluetooth.CBUUID]?
}
@_inheritsConvenienceInitializers @objc public class LegacyDFUServiceInitiator : SpirobankSmartKit.DFUServiceInitiator {
  @objc override public func start(targetWithIdentifier uuid: Foundation.UUID) -> SpirobankSmartKit.DFUServiceController?
  @available(*, deprecated)
  @objc override public init(centralManager: CoreBluetooth.CBCentralManager, target: CoreBluetooth.CBPeripheral)
  @objc override public init(queue: Dispatch.DispatchQueue? = nil, delegateQueue: Dispatch.DispatchQueue = super, progressQueue: Dispatch.DispatchQueue = super, loggerQueue: Dispatch.DispatchQueue = super)
  @objc deinit
}
