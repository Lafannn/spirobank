// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: device_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum AtsStandard: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case ats2015 // = 0
  case ats2019 // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .ats2015
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ats2015
    case 1: self = .ats2019
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .ats2015: return 0
    case .ats2019: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension AtsStandard: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [AtsStandard] = [
    .ats2015,
    .ats2019,
  ]
}

#endif  // swift(>=4.2)

enum CheckState: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case enabled // = 0
  case disabled // = 1
  case requestTimedOut // = 2
  case firmwareUpdateNeeded // = 3
  case testNotSupported // = 4
  case UNRECOGNIZED(Int)

  init() {
    self = .enabled
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .enabled
    case 1: self = .disabled
    case 2: self = .requestTimedOut
    case 3: self = .firmwareUpdateNeeded
    case 4: self = .testNotSupported
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .enabled: return 0
    case .disabled: return 1
    case .requestTimedOut: return 2
    case .firmwareUpdateNeeded: return 3
    case .testNotSupported: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension CheckState: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [CheckState] = [
    .enabled,
    .disabled,
    .requestTimedOut,
    .firmwareUpdateNeeded,
    .testNotSupported,
  ]
}

#endif  // swift(>=4.2)

struct DeviceInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String = String()

  var name: String = String()

  var `protocol`: String = String()

  var serialNumber: String = String()

  ///signal strenght in Db of the device
  var rssi: Int64 = 0

  ///ver 2.0.0 the test requested to current instance of device
  var currentTestType: Int64 = 0

  ///ver 2.0.1 new deviceInfo property: AdvertisementData (sent by device during discovery)
  var advertisementData: String = String()

  ///ver 2.4.0
  var nameCached: String = String()

  /// vers 2.5.2 - 1.2.2 for iSpirometry 
  var shortName: String = String()

  ///vers 2.7.2
  var bootID: String = String()

  ///ATS2019
  var atsStandardSupported: AtsStandard = .ats2015

  ///VC TEST
  var fvcPlusEnableStatus: CheckState = .enabled

  var vcEnableSatus: CheckState = .enabled

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension AtsStandard: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ATS_2015"),
    1: .same(proto: "ATS_2019"),
  ]
}

extension CheckState: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ENABLED"),
    1: .same(proto: "DISABLED"),
    2: .same(proto: "REQUEST_TIMED_OUT"),
    3: .same(proto: "FIRMWARE_UPDATE_NEEDED"),
    4: .same(proto: "TEST_NOT_SUPPORTED"),
  ]
}

extension DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "DeviceInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "deviceId"),
    2: .same(proto: "name"),
    3: .same(proto: "protocol"),
    4: .same(proto: "serialNumber"),
    5: .same(proto: "rssi"),
    6: .same(proto: "currentTestType"),
    7: .same(proto: "advertisementData"),
    8: .same(proto: "nameCached"),
    9: .same(proto: "shortName"),
    10: .same(proto: "bootID"),
    11: .same(proto: "atsStandardSupported"),
    12: .same(proto: "fvcPlusEnableStatus"),
    13: .same(proto: "vcEnableSatus"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.`protocol`) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.serialNumber) }()
      case 5: try { try decoder.decodeSingularInt64Field(value: &self.rssi) }()
      case 6: try { try decoder.decodeSingularInt64Field(value: &self.currentTestType) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.advertisementData) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self.nameCached) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self.shortName) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self.bootID) }()
      case 11: try { try decoder.decodeSingularEnumField(value: &self.atsStandardSupported) }()
      case 12: try { try decoder.decodeSingularEnumField(value: &self.fvcPlusEnableStatus) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self.vcEnableSatus) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.`protocol`.isEmpty {
      try visitor.visitSingularStringField(value: self.`protocol`, fieldNumber: 3)
    }
    if !self.serialNumber.isEmpty {
      try visitor.visitSingularStringField(value: self.serialNumber, fieldNumber: 4)
    }
    if self.rssi != 0 {
      try visitor.visitSingularInt64Field(value: self.rssi, fieldNumber: 5)
    }
    if self.currentTestType != 0 {
      try visitor.visitSingularInt64Field(value: self.currentTestType, fieldNumber: 6)
    }
    if !self.advertisementData.isEmpty {
      try visitor.visitSingularStringField(value: self.advertisementData, fieldNumber: 7)
    }
    if !self.nameCached.isEmpty {
      try visitor.visitSingularStringField(value: self.nameCached, fieldNumber: 8)
    }
    if !self.shortName.isEmpty {
      try visitor.visitSingularStringField(value: self.shortName, fieldNumber: 9)
    }
    if !self.bootID.isEmpty {
      try visitor.visitSingularStringField(value: self.bootID, fieldNumber: 10)
    }
    if self.atsStandardSupported != .ats2015 {
      try visitor.visitSingularEnumField(value: self.atsStandardSupported, fieldNumber: 11)
    }
    if self.fvcPlusEnableStatus != .enabled {
      try visitor.visitSingularEnumField(value: self.fvcPlusEnableStatus, fieldNumber: 12)
    }
    if self.vcEnableSatus != .enabled {
      try visitor.visitSingularEnumField(value: self.vcEnableSatus, fieldNumber: 13)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: DeviceInfo, rhs: DeviceInfo) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.name != rhs.name {return false}
    if lhs.`protocol` != rhs.`protocol` {return false}
    if lhs.serialNumber != rhs.serialNumber {return false}
    if lhs.rssi != rhs.rssi {return false}
    if lhs.currentTestType != rhs.currentTestType {return false}
    if lhs.advertisementData != rhs.advertisementData {return false}
    if lhs.nameCached != rhs.nameCached {return false}
    if lhs.shortName != rhs.shortName {return false}
    if lhs.bootID != rhs.bootID {return false}
    if lhs.atsStandardSupported != rhs.atsStandardSupported {return false}
    if lhs.fvcPlusEnableStatus != rhs.fvcPlusEnableStatus {return false}
    if lhs.vcEnableSatus != rhs.vcEnableSatus {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
